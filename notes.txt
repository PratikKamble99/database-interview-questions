My SQL contains Row and columns structure

1) DDL – Data Definition Language 
	( CREATE, ALTER: Update database structure, DROP, TRUNCATE: Used to remove all rows (complete data) from a table, Schema remians in DB , RENAME, COMMENT )
2) DQL – Data Query Language 
	( SELECT ) 
3) DML – Data Manipulation Language
	( INSERT, UPDATE, DELETE, LOCK ) 
4) DCL – Data Control Language
	( GRANT: Assigns new privileges to a user account, REVOKE: Removes previously granted privileges from a user account )
5) TCL – Transaction Control Language: group a set of tasks into a single execution unit.
	( BEGIN TRANSACTION, COMMIT: Saves all changes made during the transaction, ROLLBACK, SAVEPOINT ) 

Queries:
    1. DATABASE 
	1) CREATE DATABASE <DB_NAME>: Create DATABASE
	2) DROP DATABASE <DB_NAME>: Delete DATABASE
	3) ALTER DATABASE <DB_NAME> READ ONLY = 1 : Makes read only DATABASE ( if we use READ ONLY = 0 Then it will reset readonly DB )
		We can manipulate database if it is in READ ONLY MODE 
	  
    2. TABLES
	1)  CREATE TABLE <TABLE_NAME> : Create new table in DB
		eg. CREATE TABLE employees (
			employee_id INT,
			first_name VARCHAR( 50 ), // 50 is max character length
			hourly_pay DECIMAL( 5, 2 ), // 5 is max digits and 2 is how many digits after decimal 
			hire_date DATE 
		    )
 	2) SELECT <TABLE_NAME> : Select table data
		eg. SELECT * FROM employees
	3) RENAME TABLE <OLD_TABLE_NAME> TO <NEW_TABLE_NAME>
	4) DROP <TABLE_NAME> : Deletes table from DB
	5) ALTER TABLE <TABLE_NAME> 
		a. ADD <COLUMN_NAME> VARCHAR( 15 ) : Update structure of table ( add new column in table )
		b. RENAME COLUMN <OLD_COL_NAME> TO <NEW_COL_NAME> : Rename column name 
		c. MODIFY COLUMN <COL_NAME> VARCHAR( 50 ): Updates column data type eg. varchar(10) to varchar(50)
		d. MODIFY <COL_NAME + DATA_TYPE> AFTER <COL_NAME_WHICH_AFTER_YOU_WANT_TO_MOVE_YOUR_COLUMN> :  Will change position of your column
			You can use FIRST to move at first position
		e. DROP COLUMN <COL_NAME> : Delete column from table

    3. INSERT QUERIES
	1) INSERT INTO <TABLE_NAME> (field_1, field_2, field_3) VALUES (value_1, value_2, value_3) 
		Note: length of field and values should be equal while using this approach.

   4. SELECT QUERIES
	1) SELECT * FROM <TABLE_NAME>
	2) SELECT field_1, field_2, field_3 FROM <TABLE_NAME> : This used to select particular fields only.
	3) SELECT * FROM <TABLE_NAME> WHERE <CONDITION> : Used this when we have to query with condition. 
		Different conditions operator: >=, <=, !=, =, >, <, IS NULL ect. 
	
	WHEN clause:- The CASE statement is followed by at least one pair of WHEN and THEN statements—SQL's equivalent of IF/THEN
	Eg. 
	select user_name , case
	when rating between 1800 and 1999 then "4 Star"
	when rating between 2000 and 2199 then "5 Star"
	when rating between 2200 and 2499 then "6 Star"
	else "None" end as category
	from Users group by user_name; 

   5. UPDATE QUERIES
	1) UPDATE <TABLE_NAME> SET <field_1> = <VALUE_1> <field_2> = <VALUE_2>  WHERE <CONDITION>;
		If yiu update column value without WHERE condition then all columns will affect with that value.

   6. DELETE QUERIES
	1) DELETE FROM <TABLE_NAME> WHERE <CONDITION>;
		note: don't DELETE use without WHERE condition. It will delect ALL table rows.

   7. auto commit, commit & rollback ( check in details ) 

   8. DATE, TIME, DATETIME data-types
	1) DATE : store date type value
	2) TIME : stores time type value
	3) DATETIME : stores date and time value

	in-build functions to get date 
	1) CURRENT_DATE(): returns current date
	2) CURRENT_TIME(): returns current time
	3) NOW(): returns current date and time 

   9. UNIQUE values
	eg. 
	  1) CREATE TABLE <TABLE_NAME> (
		field_1 datatype UNIQUE
	     )
	
	  2) ALTER TABLE <TABLE_NAME> 
		ADD CONSTRAINTS 
		UNIQUE(field_name)

   10. NOT NULL values
	1) ALTER TABLE <TABLE_NAME>
		MODIFY <COL_NAME> data_type NOT NULL

   11. CHECK :- adding check on column with condition. If condition not satisfies then it will not inster in table
	eg. 1) while CREATING TABLE :- 
		CERATE TABLE <TABLE_NAME> (
		hourly_pay INT,
		CONSTRAINT <CHECK_CONDITION_NAME> CHECK ( field_name CONDITION  value ) 
		
	   2) UPDATING COL
		ALTER TAbLE <TABLE_NAME>
		ADD CONSTRAINT <CHECK_CONSTRAINT_NAME> CHECK( field_name CONDITION value )

	   3) REMOVE CHECK 
		ALTER TABLE <TABLE_NAME>
		DROP <CHECK_CONSTRAINT_NAME>

   12. DEFAULT value in col
	Methods 
	1) While CREATING A TABLE
		CREATE TABLE <TABLE_NAME>(
			hourly_pay INT DEFAULT 10
		)

	2) On existing TABLE COLUMN
		ALTER TABLE <TABLE_NAME>
		ALTER <COL_NAME>  SET DEFAULT 0

   13. PRIMARY KEY: Used as unique identifier for each row in table ( can't be null, can't be duplicate, can't be empty )
	Methods:
	1) While CREATING NEW TABLE	
		CREATE TABLE <TABLE_NAME>(
			field_name data_type PRIMARY KEY
		)	

	2) On existing table
		ALTER TABLE <TABLE_NAME>
		ADD CONSTRAINT
		PRIMARY KEY (field_name)

	3) Delete PRIMARY KEY
		ALTER TABLE <TABLE_NAME>
		DROP PRIMARY KEY

   14. FOREIGN KEY: Used to link two tables together. It is used to maintain data integrity between two tables
	Methods:
	1) While CREATING NEW TABLE
		CREATE TABLE <TABLE_NAME>(
			field_name data_type,
			CONSTRAINT <FK_NAME> FOREIGN KEY (field_name) REFERENCES <TABLE_NAME_2>(table_2_field)
		)
			
	2) On existing table
		ALTER TABLE <TABLE_NAME>
		ADD CONSTRAINT <FK_NAME> FOREIGN KEY (field_name) REFERENCES <TABLE_NAME_2>(table_2_field)

	3) Delete FOREIGN KEY
		ALTER TABLE <TABLE_NAME>
		DROP FOREIGN KEY <FK_NAME>
 
   15. JOINS
	1) INNER JOIN: it returns Only condition common in both tables
	eg. SELECT * 
	    FROM <LEFT_TABLE_NAME>
	    INNER JOIN <RIGHT_TABLE_NAME>
	    ON <LEFT_TABLE.FIELD_NAME> CONDITION <RIGHT_TABLE.FIELD_NAME>

	2) LEFT JOIN: It pull LEFT TABLE ALL data and RIGHT TABLE  matching only rows
	eg. SELECT * 
            FROM <LEFT_TABLE_NAME>
            LEFT JOIN >RIGHT_TABLE_NAME
            ON <LEFT_TABLE.FIELD_NAME> CONDITION <RIGHT_TABLE.FIELD_NAME> 

	3) RIGHT JOIN:
		-- It pull RIGHT TABLE ALL data and LEFT TABLE matching only rows
        	
		Query:
		1) SELECT *
            	   FROM <LEFT_TABLE_NAME>
            	   LEFT JOIN >RIGHT_TABLE_NAME
            	   ON <LEFT_TABLE.FIELD_NAME> CONDITION <RIGHT_TABLE.FIELD_NAME>	

	4) SELF JOIN:
		-- JOIN other COPY of table to itself
		-- Used to compare rows of the same table
		-- Helps to display hierarchy of data
	
		Query:
		1) SELECT * FROM <TABLE_NAME> as <ALICE_1>
		   INNER JOIN <TABLE_NAME> as <ALICE_2>
		   ON <ALICE_1.COL_NAME> = <ALICE_2.COL_NAME>

		NOTE:- You can use any type of join  
	
	5) CROSS JOIN:
		-- whether the other table matches or not, the CROSS JOIN keyword returns all similar records from both tables
		
	Query:
	SELECT *
	FROM CUSTOMER
	CROSS JOIN ORDERS;	 	

   16. FUNCTIONS 
	1) COUNT(): Returns count of rows in table 
	
	Query:
	1) SELECT COUNT(<COL_NAME>) as <NICKNAME>
	   FROM <TABLE_NAME>
	   WHERE <CONDITION>

	Different functions
	-- MAX(), 
	-- MIN(), 
	-- AVG(), 
	-- SUM(),
	--  CONCAT(field_1, field_2 ), 
	-- LENGTH(COL_NAME), 
	-- SUBSTR(COL_NAMe, START_INDEX, CHAR_LENGTH)
	-- ROUND( NUMBER, decimals_after_dot_number)

	Note: MIN treats the varchar values as strings and finds the minimum value by comparing their characters from left to right ( lexicographical order ).

	The query SELECT COUNT(*) FROM Given_table; counts all rows in the table, including those with NULL values. Since the table has 2 rows, the result is 2.

   17. AND, OR, NOT, BETWEEN, IN
	-- Used while you want to pull data with multiple CONDITIONS 

   18. WILD CARD CHARACTERS: %, _
	-- This are used to Substitute or more characters in string
	-- LIKE : LIKE keyword used with WHERE for searching in column 
	--" %" ==> used while word start with or end with condition
	-- eg. "%S" --> End  with
	       "S%" --> Start with

	_ ==> used to find pattern with radom letters
	eg. "_oo" --> will search word which contains "oo" at last and at "_" position with random letter 
	
	Query:
	1) SELECT * FROM <TABLE_NAME>
	   WHERE <COL_NAME> LIKE "ADD PATTERN USING WILD CARD CHARS"

   19. ORDER BY:
	-- sorts by ASC or DESC order  
	
	Query:
	1)  SELECT * FROM <TABLE_NAME>
	    ORDER BY <COL_NAME_1>, <COL_NAME_2> ASC/DESC ( by default ASC )
	
	-- You can use multiple columns for fallback 

   20. LIMIT: 
	-- LIMIT clause s used to limit number of records
	-- Useful if you are working with a lot of data
	-- Can be used o display large data on page ( Pagination )

	Query:
	1) SELECT * FROM <TABLE_NAME>
	   LIMIT <OFFSET_NUMBER>, <YOUR_LIMIT_IN_NUMBER>
	   OFFSET allows you to skip rows


   21. UNION:- UNION combines result of two or More SELECT statements 
	-- It only works with same length of SELECT columns from both tables
	-- UNION doesn't allow duplicate, to solve this use UNION ALL

	Query:
	SELECT field_1, field_2, field_3 FROM <TABLE_1>
	UNION
        SELECT * FROM <TABLE_2> ==> this table contains 3 columns

   22. VIEW 
	-- Virtual table based on the result set of an SQL statement
	-- The fields in views are fields from one or more real tables in the database
	-- They are not real tables, but can be interacted with  if they were
	-- You can perform all operations on view as TABLE

	Query:
	1) CREATE VIEW <VIEW_NAME> AS
	   SELECT <COL_1>, <COL_2>
	   FROM <TABLE_NAME>

	2) SELECT * FROM <VIEW_NAME>  

	3) DROP VIEW <VIEW_NAME>  

   23. INDEX
	-- INDEX id BTree data structure
	-- indexes are used to find values within specific column more quickly 
	-- MySQL search normally sequentially through a column 
	-- The longer the column, the more expensive the operation
	-- UPDATE takes more time, SELECT take less

	Query:
	1) CREATE INDEX <INDEX_NAME>
	   ON <TABLE_NAME>(field_1, field_2)
	
	2) ALTER <TABLE_NAME>
	   DROP INDEX <INDEX_NAME>

	3) SHOW INDEXES FROM <TABLE_NAME>

   24. SUBQUERIES
	-- Query within query
	
	Query:
	SELECT * FROM <TABLE_NAME>
	WHERE (
		<SELECT <COL_NAME> FROM <TABLE_NAME> 
		WHERE <SUB_QUERY_CONDITION>
	      ) <CONDITION_2>
	
	EG.
	SELECT first_name, last_name
	FROM employees
	WHERE (SELECT AVG(hourly_pay) FROM employee) < hourly_pay

   25. GROUP BY
	-- aggregate all rows by  specific column 
	-- often usage with aggregate function SUM(), MAX(), MIN(), AVG(), COUNT()
	
	Query:
	SELECT SUM(amount), order_date
	FROM transactions
	GROUP BY order_date

   26. ROLLUP
	-- ROLLUP , extension of the GROUP BY clause
	-- produces another row d show GRAND TOTAL ( super aggregate value )

	Query:
	SELECT SUM(amount), order_date
	FROM transactions
	GROUP BY order_date WITH ROLLUP

   27. ON DELETE
	-- ON DELETE SET NULL = When a FK deleted, replace EK with null which containing FK in other table
	-- ON DELETE CASCADE = When a FK deleted, delete row which containing FK in other table

	Query:
	1) ALTER <TABLE_NAME>
	   ADD CONSTRAINT <FK_NAME>
	   FOREIGN KEY(COL_NAME) REFERENCES <TABLE_NAME_2>(PRIMARY_KEY_COL_NAME)
	   ON DELETE SET NULL/ ON DELETE CASCADE

   28. STORED PROCEDURES
	-- is Prepared SQL code that you can save 
	-- Great if there's query you write often
	-- reduces traffic
	-- Increase performance
	-- Secure, admin can grant permission to use
	-- increase memory usage of every connection
	
	Query:
	1) DELIMITER $$ --> This line replace delimiter symbol( ; ) to $$
	   CREATE PROCEDURE <PROCEDURE_NAME>(IN <PARAMETER_NAME> DATA_TYPE)
	   BEGIN 
		SELECT * FROM <TABLE_NAME>
		WHERE <COL_NAME> OPERATOR <PARAMETER_NAME>;
	   END $$
	   DELIMITER ;

	2) DROP PROCEDURE <PROCEDURE_NAME>

	3) CALL <PROCEDURE_NAME>(<ARG>)

   29. TRIGGERS
	-- When an event happens, do something
	-- ( INSERT< UPDATE, DELETE )
	-- benefits ==> checks data, handle errors, auditing tables

	Query:
	1) CREATE TRIGGER <TRIGGER_NAME>
	   BEFORE/AFTER <EVENT> ON <TABLE_NAME> // <EVENT> = INSERT / UPDATE / DELETE
	   FOR EACH ROW // on every row perform action 
	   SET NEW.<COL_NAME> = <ACTION>  // NEW used to refer new OR old value
	   
	2) SHOW TRIGGERS  

	EG.
	CREATE TRIGGER after_salary_delete
	AFTER DELETE ON employees
	FOR EACH ROW
	UPDATE expenses
	SET expense_total = ( expenses_total - OLD.salary )
	WHERE expense_name = 'salaries';
	SET NEW.salary = (NEW.hourly_pay * 20280)
	ON expenses 

   NOTES:
	1) When you want to use distinct in functions use inside function 
	eg. SELECT COUNT( DISTINCT COL_NAME ) 

   WHEN Clause Eg.
	SELECT 
	CASE WHEN A = B AND B = C THEN 'Equilateral'
	WHEN A + B <= C OR B + C <= A OR A + C <= B THEN 'Not A Triangle'
	WHEN A != B AND B != C AND A != C THEN 'Scalene'
	WHEN (A = B AND A != C) OR (B = C AND B != A) OR (A = C AND A != B)  THEN 'Isosceles'
	END AS ""
	FROM TRIANGLES

   With condition in COUNT()
	SELECT
	COUNT(CASE WHEN condition1 THEN expression1 ELSE NULL END) AS Alias1,
	COUNT(CASE WHEN condition2 THEN expression2 ELSE NULL END) AS Alias2
	FROM table_name
	WHERE condition;
;
